import streamlit as st
import os
from langchain_groq import ChatGroq

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser  
import time

from dotenv import load_dotenv
load_dotenv()

groq_api_key=os.environ['GROQ_API_KEY']


# Set page configuration


st.set_page_config(
    page_title="Chitchat Bot",
    page_icon="logo1.jpg" # Replace with your logo file name
)
model = st.sidebar.selectbox(
    'Choose a model',
    ['mixtral-8x7b-32768', 'llama2-70b-4096']
)
conversational_memory_length = st.sidebar.slider('Conversational memory length:', 1, 10, value = 5)


st.title("Chitchat Bot")
llm=ChatGroq(groq_api_key=groq_api_key,
             model_name=model)#"mixtral-8x7b-32768")
model = llm
# prompt=ChatPromptTemplate.from_messages([
#             ("human", "{text}"),
#             ("ai", "you are a helpful assistant, so answer accordingly"), 
#             ("human", "That's good to hear."),
#         ])

# system = "You are a helpful assistant."
# human = "{text}"

# prompt = ChatPromptTemplate.from_messages(
#     [
#         ("system", system), ("human", human)
#     ]
# )  

# chain = prompt | llm | StrOutputParser()
# # inp = st.text_input("write something")
# # 
# print(chain.invoke(
#     {"text":"write 100 words job description for Data Scientist with 1 year experience"}
# ))
# if inp: st.write(chain.invoke({"text":inp}))



from langchain.chains import ConversationChain
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain.prompts import PromptTemplate


memory=ConversationBufferWindowMemory(k=5)#conversational_memory_length)

user_question = st.text_input("Ask a question:")

    # session state variable
if 'chat_history' not in st.session_state:
    
    st.session_state.chat_history=[]
else:
    for message in st.session_state.chat_history:
        memory.save_context({'input':message['human']},{'output':message['system']})


    # Initialize Groq Langchain chat object and conversation

conversation = ConversationChain(
            llm=llm,
            memory=memory
    )
# st.set_page_config(page_icon="9342336.jpg")
    # If the user has asked a question,
if user_question:
    # The chatbot's answer is generated by sending the full prompt to the Groq API.
    response = conversation(user_question)
    message = {'human':user_question,'system':response['response']}
    st.session_state.chat_history.append(message)
    st.write("Chatbot:", response['response'])

